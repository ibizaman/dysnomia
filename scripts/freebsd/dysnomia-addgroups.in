#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Copyright (c) 2009-2020 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 groupfile
  or: $0 groupdir

The command `dysnomia-addgroups' automatically creates groups from configuration
files consisting of key=value pairs.

Options:
  -h, --help                 Shows the usage of this command
  -v, --version              Shows the version of this command
EOF
}

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2009-2020 Sander van der Burg
EOF
}

createGroup()
{
    export groupfile="$1"

    (
        source "$groupfile"

        group="$(basename "$groupfile")"

        if pw group show $group > /dev/null
        then
            echo "Group: $group already exists!" >&2
        else
            if [ -n "$gid" ]
            then
                gidArg="-g $gid"
            fi

            pw group add $gidArg $group
        fi
    )
}

# Validate parameters

path="$1"

if [ ! -e "$path" ]
then
    echo "ERROR: The path: $path is not valid!" >&2
    exit 1
fi

# Execute operation

target="$path/dysnomia-support/groups"

if [ -f "$target" ]
then
    createGroup "$path"
elif [ -d "$target" ]
then
    ls $target/* | while read groupfile
    do
        createGroup "$groupfile"
    done
fi
