#!/bin/bash
set -e
set -o pipefail

# Copyright (c) 2009-2021 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Shows the usage of this command to the user

showUsage()
{
    me="$(basename "$0")"

    cat <<EOF
Usage: $me [OPTION] OPERATION

The command \`dysnomia-containers' can be used to manage all mutable components
deployed to a set of containers.

Options:

Operations:
      --query-containers            Queries the available containers
      --query-available-components  Queries the available mutable components
                                    that can be deployed to containers
      --query-activated-components  Queries the activated mutable components
                                    deployed to containers
      --generate-expr               Generate a Nix expression from all the
                                    container configurations and their properties
      --generate-dot                Generate a dot file that visualizes the
                                    available components per container
  -o, --operation=OPERATION         Executes the given operation on all mutable
                                    components deployed to a container
      --deploy                      Deploys all unactivated available mutable
                                    components and undeploys obsolete deployed
                                    components
      --snapshot                    Snapshots the state of all mutable
                                    components
      --restore                     Restores the state of all mutable
                                    components
      --collect-garbage             Removes the state of all mutable components
                                    that have been marked as garbage
  -h, --help                        Shows the usage of this command
  -v, --version                     Shows the version of this command

General parameters:
  -C, --container=CONTAINER         Restrict the operations to the given
                                    container
  -y                                Auto confirm when destructive operations are
                                    performed

Environment:
  DYSNOMIA_COMPONENTS_PATH  Specifies the search directories of the components.
                            If the component is an ordinary string (not starting
                            with / or ./), Dysnomia searches in the folders
                            provided in this colon-separated string (defaults
                            to: /etc/dysnomia/components).
  DYSNOMIA_CONTAINERS_PATH  Specifies the search directories of the containers.
                            If the container is an ordinary string (not starting
                            with / or ./), Dysnomia searches in the folders
                            provided in this colon-separated string (defaults
                            to: /etc/dysnomia/containers).
  DYSNOMIA_PROPERTIES       File capturing general machine properties (defaults
                            to: /etc/dysnomia/properties).
  DYSNOMIA_STATEDIR         Specifies where the snapshots must be stored on the
                            coordinator machine (defaults to:
                            /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    me="$(basename "$0")"

    cat <<EOF
$me (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2009-2021 Sander van der Burg
EOF
}


# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o o:C:yhv -l query-containers,query-available-components,query-activated-components,generate-expr,generate-dot,operation:,deploy,snapshot,restore,collect-garbage,container:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --query-containers)
            action="query-containers"
            ;;
        --query-available-components)
            action="query-available-components"
            ;;
        --query-activated-components)
            action="query-activated-components"
            ;;
        --generate-expr)
            action="generate-expr"
            ;;
        --generate-dot)
            action="generate-dot"
            ;;
        -o|--operation)
            action="execute-operation"
            operation="$2"
            ;;
        --deploy)
            action="deploy"
            ;;
        --snapshot)
            action="snapshot"
            ;;
        --restore)
            action="restore"
            ;;
        --collect-garbage)
            action="collect-garbage"
            ;;
        -C|--container)
            container="$2"
            ;;
        -y)
            yes=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Validate options

checkContainersPath
checkComponentsPath
checkStateDir

if [ "$DYSNOMIA_PROPERTIES" = "" ]
then
    DYSNOMIA_PROPERTIES=/etc/dysnomia/properties
fi

if [ -z "$action" ]
then
    echo "No action specified!" >&2
    exit 1
fi

# Execute operation

queryAvailableComponents()
{
    for i in $(ls $DYSNOMIA_COMPONENTS_PATH | tr ':' ' ')
    do
        if [ "$container" = "" ] || [ "$container" = "$i" ]
        then
            for component in $(ls $DYSNOMIA_COMPONENTS_PATH/$i)
            do
                echo "$i/$component"
            done
        fi
    done
}

queryActivatedComponents()
{
    if [ -d "$DYSNOMIA_STATEDIR/activated" ]
    then
        for i in $(ls $DYSNOMIA_STATEDIR/activated)
        do
            if [ "$container" = "" ] || [ "$container" = "$i" ]
            then
                for component in $(ls $DYSNOMIA_STATEDIR/activated/$i)
                do
                    echo "$i/$component"
                done
            fi
        done
    fi
}

executeOperation()
{
    if [ -z "$operation" ]
    then
        echo "No operation specified!" >&2
        exit 1
    fi

    activatedComponents=$(queryActivatedComponents)

    for i in $activatedComponents
    do
        container=$(dirname $i)
        component=$(basename $i)

        dysnomia --operation $operation --container $container --component $DYSNOMIA_STATEDIR/activated/$container/$component
    done
}

printProperties()
{
    local line="$1"
    local varName="$2"
    local indent="$3"

    ( eval $line

      if declare -p $varName 2> /dev/null | grep -q 'declare \-a'
      then
          varRef="$varName[@]"

          echo -n "$indent\"$varName\" = [ "
          for i in "${!varRef}"
          do
              echo -n "\"$i\" "
          done
          echo "];"
      else
          echo "$indent\"$varName\" = \"${!varName}\";"
      fi
    )
}

case "$action" in
    query-containers)
        for container in $(ls $DYSNOMIA_CONTAINERS_PATH | tr ':' ' ')
        do
            echo "$container"
        done
        ;;
    query-available-components)
        queryAvailableComponents
        ;;
    query-activated-components)
        queryActivatedComponents
        ;;
    generate-expr)
        echo "{"

        # Display machine level properties, if provided
        if [ -f "$DYSNOMIA_PROPERTIES" ]
        then
            echo "  properties = {"

            cat "$DYSNOMIA_PROPERTIES" | while read i
            do
                varName=$(echo ${i%%=*} | sed 's/"/\\"/g' )

                if [ "$varName" != "" ]
                then
                    printProperties "$i" "$varName" "    "
                fi
            done

            echo "  };"
        fi

        # Display container properties
        echo "  containers = {"
        for path in $(echo $DYSNOMIA_CONTAINERS_PATH | tr ':' ' ')
        do
            if [ -d "$path" ]
            then
                for container in $(ls $path)
                do
                    echo "    $container = {"

                    cat $path/$container | while read i
                    do
                        varName=$(echo ${i%%=*} | sed 's/"/\\"/g' )

                        if [ "$varName" != "" ] && [ "$varName" != "type" ]
                        then
                            printProperties "$i" "$varName" "      "
                        fi
                    done

                    echo "    };"
                done
            fi
        done

        echo "  };"

        # Display the system attribute in the properties as a seperately if provided as it has a special status

        if [ -f "$DYSNOMIA_PROPERTIES" ]
        then
            cat "$DYSNOMIA_PROPERTIES" | while read i
            do
                varName=$(echo ${i%%=*} | sed 's/"/\\"/g' )

                if [ "$varName" = "system" ]
                then
                    printProperties "$i" "$varName" "  "
                fi
            done
        fi

        echo -n "}"
        ;;
    generate-dot)
        echo "digraph G {"

        for path in $(echo $DYSNOMIA_CONTAINERS_PATH | tr ':' ' ')
        do
            if [ -d "$path" ]
            then
                for container in $(ls $path)
                do
                    echo "  subgraph cluster_${container//-/_} {"
                    echo "    style=filled;"
                    echo "    label=\"$container\";"
                    echo "    fillcolor=grey"
                    echo "    node [style=filled,fillcolor=white,color=black];"
                    availableComponents=$(queryAvailableComponents)

                    for i in $availableComponents
                    do
                        componentName="$(basename "$i")"
                        echo "    \"$i\" [ label = \"$componentName\" ];"
                    done

                    echo "  }"
                done
            fi
        done

        echo "}"
        ;;
    execute-operation)
        executeOperation
        ;;
    deploy)
        availableComponents=$(queryAvailableComponents)
        activatedComponents=$(queryActivatedComponents)

        # For each activated component that is not available: deactivate
        for i in $activatedComponents
        do
            container=$(dirname $i)
            component=$(basename $i)
            available=0

            for j in $availableComponents
            do
                if [ "$i" = "$j" ]
                then
                    available=1
                    break
                fi
            done

            if [ "$available" = "0" ]
            then
                echo "Deactivating component: $component in container: $container" >&2
                dysnomia --operation deactivate --container $container --component $DYSNOMIA_STATEDIR/activated/$container/$component
            fi
        done

        # For each available component that has not been activated: activate
        for i in $availableComponents
        do
            container=$(dirname $i)
            component=$(basename $i)
            activated=0

            for j in $activatedComponents
            do
                if [ "$i" = "$j" ]
                then
                    activated=1
                    break
                fi
            done

            if [ "$activated" = "0" ]
            then
                echo "Activating component: $component in container: $container" >&2
                dysnomia --operation activate --container $container --component $component
            fi
        done
        ;;
    snapshot)
        operation=snapshot
        executeOperation
        ;;
    restore)
        if [ "$yes" != "1" ]
        then
            cat <<EOF
This operation will restore the state of all mutable components deployed to the
specified containers! This is a operation that can only be undone if recent
snapshots have been taken! Maybe you prefer to restore the state of individual
components.

EOF

            echo -n "Are you sure you want to proceed? [n] "
            read answer

            if [ "$answer" = "y" ]
            then
                yes=1
            fi
        fi

        if [ "$yes" = "1" ]
        then
            operation=restore
            executeOperation
        else
            echo "Not executing the restore operations!"
        fi
        ;;
    collect-garbage)
        for i in $(ls $DYSNOMIA_STATEDIR/garbage)
        do
            if [ "$container" = "" ] || [ "$container" = "$i" ]
            then
                for component in $(ls $DYSNOMIA_STATEDIR/garbage/$i)
                do
                    echo "Collecting garbage for component: $component in container: $i" >&2
                    dysnomia --operation collect-garbage --container $i --component $DYSNOMIA_STATEDIR/garbage/$i/$component
                done
            fi
        done
        ;;
esac
