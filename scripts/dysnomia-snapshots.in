#!/bin/bash
set -e
set -o pipefail

# Copyright (c) 2009-2021 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] OPERATION

The command \`dysnomia-snapshots' can be used to manage the contents of a store
of snapshots capturing multiple generations of logical state of a mutable
components hosted inside a container.

Options:

Operations:
      --query-latest   Queries the relative paths to the latest snapshots of a
                       collection of components
      --query-all      Queries the relative paths of all snapshots of a
                       collection of components
      --check          Can be used in combination with the query operations to
                       check the integrity of the snapshots
      --print-missing  Prints all the paths that do not exist in the snapshots
                       folder
      --gc             Removes older generations of snapshots of components
      --import         Moves a snapshot into the snapshots folder
      --resolve        Translates the relative snapshot paths into absolute
                       snapshot paths
  -h, --help           Shows the usage of this command
  -v, --version        Shows the version of this command

General parameters:
  -c, --component=COMPONENT  Name of (or path to) a component containing the
                             logical state of a mutable component
  -C, --container=CONTAINER  Name of (or path to) a configuration describing the
                             container in which the mutable component should be
                             hosted
      --keep=NUM             Number of snapshot generations to keep while
                             running the garbage collector. Defaults to: 1
Environment:
  DYSNOMIA_STATEDIR    Specifies where the snapshots must be stored on the
                       coordinator machine (defaults to: /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2009-2021 Sander van der Burg
EOF
}

# Enumerates over a provided container or all possible containers.
#
# Parameters:
# $1: If provided it displays the container name if it exists, if not provided
#  it displays all possible containers
#
# Returns:
# Enumeration of containers

enumerateContainers()
{
    if [ -z "$1" ]
    then
        ls $DYSNOMIA_STATEDIR/generations
    else
        if [ -d $DYSNOMIA_STATEDIR/generations/$1 ]
        then
            echo "$1"
        fi
    fi
}

# Enumerates over all existing provided components or all possible components
# deployed to a container.
#
# Parameters:
# $1: Name of container where to query the components from
# $2: If provided, it displays the name of the component if it exists, if not
#   provided it displays all available components
#
# Returns:
# Enumeration of components

enumerateComponents()
{
    if [ -z "$2" ]
    then
        if [ -d $DYSNOMIA_STATEDIR/generations/$1 ]
        then
            ls $DYSNOMIA_STATEDIR/generations/$1
        fi
    else
        if [ -d $DYSNOMIA_STATEDIR/generations/$1/$2 ]
        then
            echo "$2"
        fi
    fi
}

# Enumerates over all snapshot generations of a component deployed to a
# container.
#
# Parameters:
# $1: Name of a container
# $2: Name of a component deployed to the container
#
# Returns:
# Enumeration of the snapshot generations

enumerateSnapshotGenerations()
{
    ls $DYSNOMIA_STATEDIR/generations/$1/$2
}

# Prints a relative path to a snapshot using the snapshot naming convention
#
# $1: Name of a container
# $2: Name of a component deployed to the container
# $3: Generation symlink to a snapshot
#
# Returns:
# The relative snapshot path in the format: container/component/identifier

printSnapshotRelativePath()
{
    local snapshot=$(@readlink@ $DYSNOMIA_STATEDIR/generations/$1/$2/$3)
    echo $container/$component/$(basename $snapshot)
}

# Checks whether the computed hash of a snapshot matches the provided hash.
#
# $1: Name of a container
# $2: Name of a component deployed to the container
# $3: Generation symlink to a snapshot

checkSnapshot()
{
    local snapshot=$(@readlink@ $DYSNOMIA_STATEDIR/generations/$1/$2/$3)
    local checksumPath="$DYSNOMIA_STATEDIR/checksums/$1/$2/$(basename $snapshot)"
    local status=0

    if [ -f "$checksumPath" ]
    then
        local checksum=$(cat $checksumPath)
        local computedChecksum=$(computeOutputHash "$DYSNOMIA_STATEDIR/snapshots/$1/$2/$(basename $snapshot)")

        if [ "$checksum" != "$computedChecksum" ]
        then
            echo "Checksum mismatch detected for snapshot: $container/$component/$(basename $snapshot), we have: '$computedChecksum', we expect: '$checksum'" >&2
            status=1
        fi
    else
        echo "WARNING: no checksum found for snapshot: $container/$component/$(basename $snapshot)" >&2
    fi

    return $status
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o C:c:hv -l print-missing,query-latest,query-all,check,gc,import,resolve,container:,component:,keep:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --query-latest)
            operation="query-latest"
            ;;
        --query-all)
            operation="query-all"
            ;;
        --check)
            check=1
            ;;
        --print-missing)
            operation="print-missing"
            ;;
        --gc)
            operation="gc"
            ;;
        --import)
            operation="import"
            ;;
        --resolve)
            operation="resolve"
            ;;
        -C|--container)
            container=$2
            ;;
        -c|--component)
            component=$2
            ;;
        --keep)
            keep=$2
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

shift

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Validate options

checkStateDir

if [ -z "$operation" ]
then
    echo "No operation specified!" >&2
    exit 1
fi

if [ -z "$keep" ]
then
    keep=1
fi

# Execute operation

componentName=$(determineComponentName $component)

case "$operation" in
    query-latest)
        for container in $(enumerateContainers $container)
        do
            for component in $(enumerateComponents $container $componentName)
            do
                lastGeneration=$(enumerateSnapshotGenerations $container $component | sort -n | tail -1)

                if [ "$lastGeneration" != "" ]
                then
                    printSnapshotRelativePath $container $component $lastGeneration

                    if [ "$check" = "1" ]
                    then
                        checkSnapshot $container $component $lastGeneration
                    fi
                fi
            done
        done
        ;;
    query-all)
        for container in $(enumerateContainers $container)
        do
            for component in $(enumerateComponents $container $componentName)
            do
                for generation in $(enumerateSnapshotGenerations $container $component)
                do
                    printSnapshotRelativePath $container $component $generation

                    if [ "$check" = "1" ]
                    then
                        checkSnapshot $container $component $generation
                    fi
                done
            done
        done
        ;;
    print-missing)
        if [[ ! -z "$@" ]]
        then
            for i in $@
            do
                if [ ! -e $DYSNOMIA_STATEDIR/snapshots/$i ]
                then
                    echo $i
                fi
            done
        fi
        ;;
    gc)
        # Determine snapshot paths of the last n-generations

        for container in $(enumerateContainers $container)
        do
            for component in $(enumerateComponents $container $componentName)
            do
                generations=$(enumerateSnapshotGenerations $container $component)
                count=$(echo "$generations" | wc -l)

                if [ $count -gt $keep ]
                then
                    # For each generation that should be kept, memorize the snapshot path

                    snapshotsToKeep=""

                    for generation in $(echo "$generations" | sort -n | tail -$keep)
                    do
                        snapshot=$(basename $(@readlink@ $DYSNOMIA_STATEDIR/generations/$container/$component/$generation))
                        snapshotsToKeep="$snapshotsToKeep $snapshot"
                    done

                    # Remove older generation symlinks

                    for generation in $(echo "$generations" | sort -n | head -n -$keep)
                    do
                        echo "Removing old generation symlink: $container/$component/$generation" >&2
                        rm $DYSNOMIA_STATEDIR/generations/$container/$component/$generation
                    done

                    # Remove all snapshots to which the last n-generations do not refer to

                    if [ -d $DYSNOMIA_STATEDIR/snapshots/$container/$component ]
                    then
                        for snapshot in $(ls $DYSNOMIA_STATEDIR/snapshots/$container/$component)
                        do
                            removeSnapshot=1

                            for keepSnapshot in $snapshotsToKeep
                            do
                                if [ "$snapshot" = "$keepSnapshot" ]
                                then
                                    removeSnapshot=0
                                    break
                                fi
                            done

                            if [ "$removeSnapshot" = "1" ]
                            then
                                echo "Removing old snapshot: $container/$component/$snapshot" >&2
                                rm -Rf $DYSNOMIA_STATEDIR/snapshots/$container/$component/$snapshot
                                rm -f $DYSNOMIA_STATEDIR/checksums/$container/$component/$snapshot
                            fi
                        done
                    fi

                    # Attempt to remove the component's generation, snapshot and checksum folders if they are empty
                    [ ! -e $DYSNOMIA_STATEDIR/generations/$container/$component ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/generations/$container/$component
                    [ ! -e $DYSNOMIA_STATEDIR/snapshots/$container/$component ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/snapshots/$container/$component
                    [ ! -e $DYSNOMIA_STATEDIR/checksums/$container/$component ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/checksums/$container/$component
                fi
            done

            # Attempt to remove the container's generation, snapshot and checksum folders if they are empty
            [ ! -e $DYSNOMIA_STATEDIR/generations/$container ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/generations/$container
            [ ! -e $DYSNOMIA_STATEDIR/snapshots/$container ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/snapshots/$container
            [ ! -e $DYSNOMIA_STATEDIR/checksums/$container ] || rmdir --ignore-fail-on-non-empty $DYSNOMIA_STATEDIR/checksums/$container
        done
        ;;
    import)
        if [ -z "$container" ]
        then
            echo "ERROR: No container specified!" >&2
            exit 1
        fi

        if [ -z "$componentName" ]
        then
            echo "ERROR: No component specified!" >&2
            exit 1
        fi

        if [[ ! -z "$@" ]]
        then
            for i in $@
            do
                if [ "${i:0:${#DYSNOMIA_STATEDIR}}" != "$DYSNOMIA_STATEDIR" ] # If a path refers to a directory in the snapshot store, do nothing. Other paths are copied into the snapshot store first
                then
                    mkdir -p $DYSNOMIA_STATEDIR/snapshots/$container/$componentName
                    mv $i $DYSNOMIA_STATEDIR/snapshots/$container/$componentName
                fi

                # Update generation symlink
                containerName=$(determineContainerName $container)
                createGenerationSymlink $(basename $i)
            done
        fi
        ;;
    resolve)
        if [[ ! -z "$@" ]]
        then
            for i in $@
            do
                echo $DYSNOMIA_STATEDIR/snapshots/$i
            done
        fi
        ;;
esac
