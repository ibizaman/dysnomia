#!/bin/bash
set -e
set -o pipefail

# Copyright (c) 2009-2020 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 --operation OPERATION --component COMPONENT --container CONTAINER
  or: $0 --operation OPERATION --component COMPONENT --type TYPE --environment
  or: $0 --shell --component COMPONENT --container CONTAINER
  or: $0 --shell --component COMPONENT --type TYPE --environment

The command \`dysnomia' modifies the state of a container in which a mutable
component is hosted. This tool can be used to execute various deployment
operations, such as activating and deactivating mutable components.

Options:
  -o, --operation=OPERATION  Specifies the operation to execute on the mutable
                             component, such as activate or deactivate
  -c, --component=COMPONENT  Name of (or path to) a component containing the
                             logical state of a mutable component
  -C, --container=CONTAINER  Name of (or path to) a configuration describing the
                             container in which the mutable component should be
                             hosted
  --shell                    Spawns a shell session in which all the containers
                             properties are available as environment variables.
  --command=COMMAND          Commands to execute in the shell session
  -E, --environment          Takes the container settings from the current
                             environment. Be careful with this!
  -t, --type=TYPE            Specifies Dysnomia to use the specified Dysnomia
                             module type if none is given. Required to be used
                             in combination with --environment
  -h, --help                 Shows the usage of this command
  -v, --version              Shows the version of this command

Environment:
  DYSNOMIA_COMPONENTS_PATH  Specifies the search directories of the components.
                            If the component is an ordinary string (not starting
                            with / or ./), Dysnomia searches in the folders
                            provided in this colon-separated string (defaults
                            to: /etc/dysnomia/components).
  DYSNOMIA_CONTAINERS_PATH  Specifies the search directories of the containers.
                            If the container is an ordinary string (not starting
                            with / or ./), Dysnomia searches in the folders
                            provided in this colon-separated string (defaults
                            to: /etc/dysnomia/containers).
  DYSNOMIA_MODULES_PATH     Specifies the search directories of the modules. If
                            the module is an ordinary string (not starting with
                            / or ./), Dysnomia searches in the folders provided
                            in this colon-separated string in addition to its
                            libexec/ directory.
  DYSNOMIA_STATEDIR         Specifies where the snapshots must be stored on the
                            coordinator machine (defaults to:
                            /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2009-2020 Sander van der Burg
EOF
}

# Autoconf settings

export prefix=@prefix@
export exec_prefix=@exec_prefix@

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o o:c:C:Et:hv -l operation:,component:,container:,shell,command:,environment,type:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -o|--operation)
            operation="$2"
            ;;
        -c|--component)
            component="$2"
            ;;
        -C|--container)
            container="$2"
            ;;
        --shell)
            operation="shell"
            shellOperation=1
            ;;
        --command)
            commands="$2"
            newline=$'\n'
            commands="$commands$newline""exit"
            ;;
        -E|--environment)
            useEnvironment=1
            ;;
        -t|--type)
            type="$2"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Import utility functions
source @datadir@/@PACKAGE@/util

# Validate options

checkContainersPath
checkComponentsPath

if [ -z "$operation" ]
then
    echo "ERROR: No operation specified!" >&2
    exit 1
fi

if [ "$useEnvironment" = "1" ]
then
    envFlags=""

    if [ "$container" = "" ]
    then
        container="$type"
    fi
elif [ -n "$container" ]
then
    # Determine the container configuration

    if [ "${container:0:1}" = "/" ] || [ "${container:0:2}" = "./" ]
    then
        # File references to containers can be used directly
        containerConfig="$(@readlink@ -f $container)"
    else
        # For ordinary strings, search for the container configuration in DYSNOMIA_CONTAINERS_PATH
        DYSNOMIA_CONTAINERS_PATHS=$(echo $DYSNOMIA_CONTAINERS_PATH | tr ':' ' ')

        for i in $DYSNOMIA_CONTAINERS_PATHS
        do
            if [ -f "$i/$container" ]
            then
                containerConfig="$i/$container"
                break
            fi
        done

        if [ ! -f "$containerConfig" ]
        then
            echo "No container configuration found for: $container" >&2
            exit 1
        fi
    fi

    # Extract the container type from the configuration

    eval $(grep "^type=" $containerConfig)

    if [ -z "$type" ]
    then
        echo "ERROR: No type specified in the container configuration!" >&2
        exit 1
    fi

    envFlags="-i"
else
    echo "No container file or environment specified!" >&2
    exit 1
fi

if [ -z "$component" ]
then
    echo "ERROR: No component is specified!" >&2
    exit 1
else
    if [ "${component:0:1}" = "/" ] || [ "${component:0:2}" = "./" ]
    then
        # File references to components can be used directly
        componentFile="$(@readlink@ -f $component)"
    else
        DYSNOMIA_COMPONENTS_PATHS=$(echo $DYSNOMIA_COMPONENTS_PATH | tr ':' ' ')

        for i in $DYSNOMIA_COMPONENTS_PATHS
        do
            if [ -e $i/$container/$component ]
            then
                componentFile="$(@readlink@ -f $i/$container/$component)"
                break
            fi
        done

        if [ "$componentFile" = "" ]
        then
            echo "No component configuration found for: $component" >&2
            exit 1
        fi
    fi
fi

# Search for Dysnomia modules in the DYSNOMIA_MODULES_PATH and the libexecdir

if [ "${type:0:1}" = "/" ] || [ "${type:0:2}" = "./" ]
then
    if [ -d "$type" ]
    then
        module="$(echo $type/libexec/dysnomia/*)"
    elif [ -f "$type" ]
    then
        module="$type"
    else
        echo "Module: $type cannot be found!" >&2
        exit 1
    fi
else
    DYSNOMIA_MODULES_PATHS=$(echo $DYSNOMIA_MODULES_PATH | tr ':' ' ')

    for i in $DYSNOMIA_MODULES_PATHS @libexecdir@
    do
        if [ -x "$i/$type" ]
        then
            module="$i/$type"
            break
        fi
    done

    if [ -z $module ]
    then
        echo "Module: $type cannot be found!" >&2
        exit 1
    fi
fi

# Helper function that configures environment variables for the shell session
composeSessionEnvironmentVariables()
{
    if [ "$containerConfig" != "" ]
    then
        cat $containerConfig | while read i
        do
            varName=$(echo ${i%%=*} | sed 's/"/\\"/g' )

            if [ "$varName" != "" ] && [ "$varName" != "type" ]
            then
                ( eval $i

                  if declare -p $varName 2> /dev/null | grep -q 'declare \-a'
                  then
                      varRef="$varName[@]"
                      value=${!varRef}
                  else
                      value=${!varName}
                  fi

                  echo "export $varName=$value"
                )
            fi
        done
    fi
}

if [ "$shellOperation" = "1" ]
then
    # Execute shell session

    TMPDIR=$(mktemp -d)
    cat > $TMPDIR/rc <<EOF
# Remove tempdir
rm -rf $TMPDIR

# Set a prompt that clearly shows the user that we are in a dysnomia shell
if [ -n "\$PS1" ]
then
    [ -e ~/.bashrc ] && source ~/.bashrc

    PROMPT_COLOR="1;32m"
    [ "\$UID" = "0" ] && PROMPT_COLOR="1;31m"

    export PS1="\n\[\033[\$PROMPT_COLOR\][dysnomia-shell:\w]\\\\$\[\033[0m\] "
fi

# Set configuration properties and invoke shell activity
$(composeSessionEnvironmentVariables)
source "$module" shell "$componentFile" "$container"

# Don't exit the shell after error
set +e

# Set general convenience environment variables
export this_dysnomia_module="$module"
export this_component="$componentFile"
export this_container="$container"

# Display general documentation
( echo
  echo "General environment variables:"
  echo "this_dysnomia_module     Path to the Dysnomia module"
  echo "this_component           Path to the mutable component"
  echo "this_container           Path to the container configuration file"
) >&2

$commands
EOF
    bash --rcfile $TMPDIR/rc
else
    # Forward the requested operation to the Dysnomia module

    ( echo $envFlags

      if [ "$containerConfig" != "" ]
      then
          cat $containerConfig | while read i
          do
              varName=$(echo ${i%%=*} | sed 's/"/\\"/g' )

              if [ "$varName" != "" ] && [ "$varName" != "type" ]
              then
                  ( eval $i

                    if declare -p $varName 2> /dev/null | grep -q 'declare \-a'
                    then
                        varRef="$varName[@]"
                        value=${!varRef}
                    else
                        value=${!varName}
                    fi

                    echo "$varName=$value"
                  )
              fi
          done
      fi

      echo "PATH=$PATH"
      echo "DYSNOMIA_STATEDIR=$DYSNOMIA_STATEDIR"
      echo "$module"
      echo "$operation"
      echo "$componentFile"
      echo "$container"
    ) | @xargs@ env
fi
