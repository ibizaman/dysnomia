#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Activate or deactivate a systemd service.
#
# Optionally, it can also work with socket or timer activation. If the component contains
# both a service and socket or timer unit with the same name, it will only start the
# socket or timer. On deactivation, it stops both the socket, timer and service.
#
# Files:
# dysnomia-support/groups/*: Groups to add on activation
# dysnomia-support/users/*: Users to add on activation
#
# Component properties (environment variables):
# systemdTargetDir: Directory where the systemd unit files should be installed
# systemdRootTarget: Root target that can be used to start all Dysnomia managed services

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

export PATH=$prefix/bin:$PATH

systemdTargetDir=${systemdTargetDir:-/etc/systemd-mutable/system}
systemdRootTargetDir=${systemdRootTarget:-dysnomia.target.wants}

cleanupResources()
{
    local storePath="$1"

    # Stop all sockets

    for i in $storePath/etc/systemd/system/*.socket
    do
        socketName="$(basename $i)"
        if [ -f "$systemdTargetDir/$socketName" ]
        then
            @systemctl@ stop "$socketName"
            rm -f $systemdTargetDir/$systemdRootTargetDir/$socketName
            rm -f $systemdTargetDir/$socketName
        fi
    done

    # Stop all timers

    for i in $storePath/etc/systemd/system/*.timer
    do
        timerName="$(basename $i)"
        if [ -f "$systemdTargetDir/$timerName" ]
        then
            @systemctl@ stop "$timerName"
            rm -f $systemdTargetDir/$systemdRootTargetDir/$timerName
            rm -f $systemdTargetDir/$timerName
        fi
    done

    # Stop all services

    for i in $storePath/etc/systemd/system/*.service
    do
        serviceName="$(basename $i)"
        if [ -f "$systemdTargetDir/$serviceName" ]
        then
            @systemctl@ stop "$serviceName"
            rm -f $systemdTargetDir/$systemdRootTargetDir/$serviceName
            rm -f $systemdTargetDir/$serviceName
        fi
    done

    # Remove remainder of the files

    for i in $(ls $storePath/etc/systemd/system)
    do
        rm -f $systemdTargetDir/$i
    done

    @systemctl@ --system daemon-reload

    dysnomia-delusers "$storePath"
    dysnomia-delgroups "$storePath"
}

rollback()
{
    cleanupResources "$1"
    exit 1
}

case "$1" in
    activate)
        (
        dysnomia-addgroups "$2"
        dysnomia-addusers "$2"

        # Symlink all systemd files
        for i in $(ls $2/etc/systemd/system)
        do
            ln -sfn $2/etc/systemd/system/$i $systemdTargetDir
        done

        # Symlink all units to be started in the root target wants directory so that
        # they will start again after a reboot

        mkdir -p $systemdTargetDir/$systemdRootTargetDir

        for service in $2/etc/systemd/system/*.service
        do
            serviceName="$(basename $service)"
            socketName="$(basename $serviceName .service).socket"
            timerName="$(basename $serviceName .service).timer"

            if [ -f "$2/etc/systemd/system/$socketName" ]
            then
                ln -sfn $2/etc/systemd/system/$socketName $systemdTargetDir/$systemdRootTargetDir
            elif [ -f "$2/etc/systemd/system/$timerName" ]
            then
                ln -sfn $2/etc/systemd/system/$timerName $systemdTargetDir/$systemdRootTargetDir
            else
                ln -sfn $2/etc/systemd/system/$serviceName $systemdTargetDir/$systemdRootTargetDir
            fi
        done

        # Reload systemd so that it can use all unit files
        @systemctl@ --system daemon-reload

        # Start all services, unless a socket or timer unit exists -> then start the socket or timer unit instead
        for service in $2/etc/systemd/system/*.service
        do
            serviceName="$(basename $service)"
            socketName="$(basename $serviceName .service).socket"
            timerName="$(basename $serviceName .service).timer"

            if [ -f "$systemdTargetDir/$socketName" ]
            then
                @systemctl@ start "$socketName"
            elif [ -f "$systemdTargetDir/$timerName" ]
            then
                @systemctl@ start "$timerName"
            else
                @systemctl@ start "$serviceName"
            fi
        done
        ) || rollback "$2"

        markComponentAsActive
        ;;

    deactivate)
        cleanupResources "$2"
        unmarkComponentAsActive
        ;;

    shell)
        cat >&2 <<EOF
This is a shell session that can be used to control the '$componentName'
systemd unit.

Some useful commands:
EOF
        for i in $(ls $2/etc/systemd/system)
        do
            if [ -f "$2/etc/systemd/system/$i" ]
            then
                echo "systemctl start $i  # Start the process" >&2
                echo "systemctl stop $i   # Stop the process" >&2
                echo "journalctl -u $i    # Display log" >&2
            fi
        done
        ;;
esac
