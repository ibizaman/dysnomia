#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Manages the deployment lifecycle of a Mongo database.
#
# On activation, an initial dump can be restored. If the mutable component
# contains a sub folder named mongo-databases/, then the dump files stored
# inside get imported.
#
# This module also supports snapshotting. It uses the output hash of the dump to
# uniquely identify each snapshot.
#
# mongoPort: Port number where MongoDB listens to
# mongoDumpArgs: Optional arguments passed to the mongodump command-line invocation
# mongoRestoreArgs: Optional arguments passed to the monogorestore command-line invocation

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

timeout=${timeout:-10}

case "$1" in
    activate)
        # Nothing needs to be done to create a mongo database. It gets created
        # automatically once an object is saved.

        if [ "$mongoPort" != "" ]
        then
            waitForPort "$mongoPort" "$timeout"
        fi

        if [ -d $2/mongo-databases ] && [ "$((echo "use $componentName;"; echo "db.getCollectionNames();") | @mongo@ | grep -x '\[ \]')" != "" ]
        then
            ( echo "use $componentName;"
              cat $2/mongo-databases/*
            ) | @mongo@
        fi

        markComponentAsActive
        ;;

    deactivate)
        markComponentAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        cd $tmpdir

        @mongodump@ $mongoDumpArgs -d $componentName -o .
        hash=$((for i in $componentName/*; do echo $i; cat $i; done) | sha256sum)
        hash=${hash:0:64}

        snapshotsPath=$(composeSnapshotsPath)

        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv $componentName $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $hash
        ;;
    restore)
        lastSnapshot=$(determineLastSnapshot)

        if [ "$lastSnapshot" != "" ]
        then
            @mongorestore@ $mongoRestoreArgs --drop -d $componentName $lastSnapshot/$componentName
        fi
        ;;
    collect-garbage)
        if componentMarkedAsGarbage
        then
            ( echo "use $componentName;"
              echo "db.dropDatabase();"
            ) | @mongo@

            unmarkComponentAsGarbage
        fi
        ;;
    shell)
        cat >&2 <<EOF
This is a shell session that can be used to control the '$componentName' Mongo database.

Module specific environment variables:
componentName       Name of the database

Some useful commands:
@mongo@ $componentName  # Start MongoDB interactive terminal
EOF
        ;;
esac
