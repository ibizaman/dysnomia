#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Manages the deployment lifecycle of a PostgreSQL database.
#
# On activation, an initial dump can be restored. If the mutable component
# contains a sub folder named postgresql-databases/, then the dump files stored
# inside get imported.
#
# This module also supports snapshotting. It uses the output hash of the dump to
# uniquely identify each snapshot.
#
# Container properties (environment variables):
# postgresqlUsername: Username of the account that has the privileges to
#    administer the database (defaults to: postgres)
# postgresqlPort: Port number to which the PostgreSQL service listens to (optional)
# postgresqlRuntimeDir: Directory in which the socket file is stored (optional)

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

timeout=${timeout:-10}
postgresqlRuntimeDir="${postgresqlRuntimeDir:-/var/run/postgresql}"

case "$1" in
    activate)
        if [ "$postgresqlPort" != "" ]
        then
            waitForSocket "$postgresqlRuntimeDir/.s.PGSQL.$postgresqlPort" "$timeout"
        fi

        # Initalize the given schema if the database does not exists
        if [ "$(su $postgresqlUsername -s /bin/sh -c "@psql@ -lqt | cut -d \| -f 1 | grep -w "$componentName" | wc -l")" = "0" ]
        then
            su $postgresqlUsername -s /bin/sh -c "@createdb@ -O $postgresqlUsername $componentName"

            if [ -d $2/postgresql-databases ]
            then
                su $postgresqlUsername -s /bin/sh -c "@psql@ --file $2/postgresql-databases/*.sql $componentName"
            fi
        fi
        markComponentAsActive
        ;;
    deactivate)
        markComponentAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        chown $postgresqlUsername $tmpdir
        cd $tmpdir
        
        su $postgresqlUsername -s /bin/sh -c "@pg_dump@ $componentName | xz > dump.pgsql.xz"
        
        hash=$(cat dump.pgsql.xz | sha256sum)
        hash=${hash:0:64}
        
        snapshotsPath=$(composeSnapshotsPath)
        
        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv dump.pgsql.xz $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $hash
        ;;
    restore)
        lastSnapshot=$(determineLastSnapshot)

        if [ "$lastSnapshot" != "" ]
        then
            su $postgresqlUsername -s /bin/sh -c "@dropdb@ $componentName"
            su $postgresqlUsername -s /bin/sh -c "@createdb@ -O $postgresqlUsername $componentName"
            su $postgresqlUsername -s /bin/sh -c "xzcat $lastSnapshot/dump.pgsql.xz | @psql@ --file - $componentName"
        fi
        ;;
    collect-garbage)
        if componentMarkedAsGarbage
        then
            su $postgresqlUsername -s /bin/sh -c "@dropdb@ $componentName"
            unmarkComponentAsGarbage
        fi
        ;;
    shell)
        cat >&2 <<EOF
This is a shell session that can be used to control the '$componentName' PostgreSQL database.

Module specific environment variables:
componentName       Name of the database
postgresqlUsername  Username of the account that has the privileges to administer
                    the database

Some useful commands:
su \$postgresqlUsername -s /bin/sh  # Open a shell session having administration privileges to PostgreSQL
@psql@ $componentName  # Open a PostgreSQL interactive terminal
EOF
        ;;
esac
