#!/bin/bash
set -e
set -o pipefail

# Copyright (c) 2009-2020 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Checks whether DYSNOMIA_CONTAINERS_PATH variables is set. If not set, it
# configures a default value

checkContainersPath()
{
    if [ "$DYSNOMIA_CONTAINERS_PATH" = "" ]
    then
        DYSNOMIA_CONTAINERS_PATH=/etc/dysnomia/containers
    fi
}

# Checks whether DYSNOMIA_COMPONENTS_PATH variables is set. If not set, it
# configures a default value

checkComponentsPath()
{
    if [ "$DYSNOMIA_COMPONENTS_PATH" = "" ]
    then
        DYSNOMIA_COMPONENTS_PATH=/etc/dysnomia/components
    fi
}

# Checks whether DYSNOMIA_STATEDIR environment variable is set. If not set, it
# configures a default value

checkStateDir()
{
    if [ "$DYSNOMIA_STATEDIR" = "" ]
    then
        if [ "$(id -u)" = "0" ]
        then
            DYSNOMIA_STATEDIR="/var/state/dysnomia"
        else
            DYSNOMIA_STATEDIR="$HOME/.dysnomia"
        fi
    fi
}

# Determines the name of the component from a given path. If a Nix store path is
# given, then the hash prefix is stripped from it.
#
# Parameters:
# $1: Path to or name of a component
# 
# Returns:
# The name of the component

determineComponentName()
{
    local storePrefix="${NIX_STORE_DIR:-/nix/store}/"
    local componentName=$(basename "$1")

    if [ "${1:0:${#storePrefix}}" = "$storePrefix" ] # If the component name is a Nix store path, then strip off the hash component
    then
        componentName="${componentName:33}"
    fi

    echo "$componentName"
}

# Determines the name of the container. If a Nix store path is given, then the
# hash prefix is stripped from it. If no parameter is given then the container
# name reverts to its type identifier.
#
# Parameters:
# $1: Path to or name of a container
# $2: Type identifier of the mutable component that determines the plugin that communicates with it
#
# Returns:
# The name of the container

determineContainerName()
{
    local storePrefix="${NIX_STORE_DIR:-/nix/store}/"

    if [ "$1" = "" ]
    then
        local containerName="$2" # If no container name is provided then the type identifier is the container name
    else
        local containerName=$(basename "$1")

        if [ "${1:0:${#storePrefix}}" = "$storePrefix" ]
        then
            containerName="${containerName:33}" # If container name is a Nix store path, then strip off the hash component
        fi
    fi

    echo "$containerName"
}

# Sets a number of common utility environment variables that come in handy for
# most Dysnomia modules 
#
# Environment variables:
# typeIdentifier: Will be set to the name of the type
# componentName: will be set to the name of the component
# containerName: will be set to the name of the container

composeUtilityVariables()
{
    checkStateDir
    typeIdentifier=$(basename "$1")
    componentName=$(determineComponentName $2)
    containerName=$(determineContainerName $3 "$typeIdentifier")
}

# Composes the path in which snapshots of components are stored
#
# Environment variables:
# DYSNOMIA_STATEDIR: Path where Dysnomia stores state
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component
#
# Returns:
# The path to the directory in which the component's snapshots are stored

composeSnapshotsPath()
{
    echo "$DYSNOMIA_STATEDIR/snapshots/$containerName/$componentName"
}

# Composes the path in which the generation symlinks of component snapshots are
# stored
#
# Environment variables:
# DYSNOMIA_STATEDIR: Path where Dysnomia stores state
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component
#
# Returns:
# The path to the directory in which the component's generation symlinks are stored

composeGenerationsPath()
{
    echo "$DYSNOMIA_STATEDIR/generations/$containerName/$componentName"
}

# Composes the path in which the checksums of component snapshots are stored
#
# Environment variables:
# DYSNOMIA_STATEDIR: Path where Dysnomia stores state
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component
#
# Returns:
# The path to the directory in which the component's checksums are stored

composeChecksumPath()
{
    echo "$DYSNOMIA_STATEDIR/checksums/$containerName/$componentName"
}

# Composes the path in which the components names are stored that have become
# garbage
#
# Environment variables:
# DYSNOMIA_STATEDIR: Path where Dysnomia stores state
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component
#
# Returns:
# The path where the component's garbage flag is stored

composeGarbagePath()
{
    echo "$DYSNOMIA_STATEDIR/garbage/$containerName/$componentName"
}

# Composes the path in which the components names are stored that have become
# activated
#
# Environment variables:
# DYSNOMIA_STATEDIR: Path where Dysnomia stores state
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component
#
# Returns:
# The path where the component's activation flag is stored

composeActivatedPath()
{
    echo "$DYSNOMIA_STATEDIR/activated/$containerName/$componentName"
}

# Marks a component as activated in a container so that it will not be deleted by
# the garbage collector

markComponentAsActive()
{
    local garbagePath=$(composeGarbagePath)
    local activatedPath=$(composeActivatedPath)

    mkdir -p $(dirname $activatedPath)

    if [ -f $garbagePath ]
    then
        mv $garbagePath $activatedPath
    else
        touch $activatedPath
    fi
}

# Unmarks a component as activated in a container so that it will be reported as
# such

unmarkComponentAsActive()
{
    local activatedPath=$(composeActivatedPath)
    rm -f $activatedPath
}

# Marks a component that has previously been activated as a garbage so that it
# will be deleted by the garbage collector,

markComponentAsGarbage()
{
    local garbagePath=$(composeGarbagePath)
    local activatedPath=$(composeActivatedPath)

    if [ ! -e $garbagePath ]
    then
        mkdir -p $(dirname $garbagePath)
        mv $activatedPath $garbagePath
    fi
}

# Unmarks a component as garbage so that it will be considered as no longer
# deployed.

unmarkComponentAsGarbage()
{
    local garbagePath=$(composeGarbagePath)
    rm -f $DYSNOMIA_STATEDIR/garbage/$containerName/$componentName
}

# Determines the name of the last snapshot.
#
# Returns:
# The path to the latest snapshot or an empty string if no snapshots exist

determineLastSnapshot()
{
    local snapshotsPath=$(composeSnapshotsPath)
    local generationsPath=$(composeGenerationsPath)

    if [ -d $generationsPath ]
    then
        local lastGeneration=$(ls $generationsPath | sort -n | tail -1)

        if [ "$lastGeneration" != "" ]
        then
            echo "$snapshotsPath/$(basename $(readlink $generationsPath/$lastGeneration))"
        fi
    fi
}

# Creates a serialization of the given directory by enumerating the file
# structure first and then the content
#
# Parameters:
# $1: Path to a directory to serialize

serializeDirectory()
{
    ( cd "$1"
      # Enumerate files
      find .
      # Concatenate files' contents
      echo
      find . -type f | while read file
      do
          cat $file
      done
    )
}

# Serializes a file or directory and returns the output hash.
#
# Parameter:
# $1: Path to a file or directory to serialize
#
# Returns:
# The SHA256 output hash

computeOutputHash()
{
    if [ -f "$1" ]
    then
        hash=$(sha256sum "$1")
    else
        hash=$(serializeDirectory "$1" | sha256sum -)
    fi

    hash=${hash:0:64}
    echo -n "sha256:$hash"
}

# Creates a new generation symlink to a given snapshot.
#
# Parameters:
# $1: Name of a snapshot
#
# Environment variables:
# containerName: Name of the container in which the mutable component is hosted
# componentName: Name of the mutable component

createGenerationSymlink()
{
    local generationsPath=$(composeGenerationsPath)

    if [ -d $generationsPath ]
    then
        local lastGeneration=$(ls $generationsPath | sort -n | tail -1)

        if [ "$lastGeneration" = "" ]
        then
            lastGeneration=0
        fi
    else
        mkdir -p $generationsPath
        local lastGeneration=0
    fi

    if [ "$lastGeneration" = "0" ] || [ "$(basename $(readlink $generationsPath/$lastGeneration))" != "$1" ] # Only create the generation symlink if the previous symlink refers to a different snapshot
    then
        local newGeneration=$((lastGeneration+1))
        ln -s "../../../snapshots/$containerName/$componentName/$1" $generationsPath/$newGeneration

        local checksumPath=$(composeChecksumPath)
        local snapshotsPath=$(composeSnapshotsPath)
        mkdir -p "$checksumPath"
        computeOutputHash "$snapshotsPath/$1" > "$checksumPath/$1"
    fi
}

# Checks whether a component has been marked as garbage
#
# Exit status:
# 0 if component is garbage, else 1

componentMarkedAsGarbage()
{
    local garbagePath=$(composeGarbagePath)
    [ -f $garbagePath ]
}

# Waits for a file to become available until a certain timeout period has
# ellapsed.
#
# Parameters:
# $1: file to wait for
# S2: timeout period in seconds
# $3: file type (f = regular file, d = directory, S = UNIX domain socket)
#
# Exit status:
# 0 if the file appears and is of the right type, else 0

waitForAnyFileType()
{
    local file="$1"
    local timeout="$2"
    local fileType="$3"
    local numOfTries=1
    local fileFound=0

    while [ $numOfTries -lt $timeout ]
    do
        if [ -e "$file" ]
        then
            fileFound=1
            break
        fi

        echo "Waiting for the file: $file to become available..." >&2

        sleep 1
        ((numOfTries++))
    done

    if [ "$fileFound" = "1" ]
    then
        case "$fileType" in
            f)
                if [ ! -f "$file" ]
                then
                    echo "Expecting $file to be a file, but it is not!" >&2
                fi
                ;;
            d)
                if [ ! -d "$file" ]
                then
                    echo "Expecting $file to be a directory, but it is not!" >&2
                fi
                ;;
            S)
                if [ ! -S "$file" ]
                then
                    echp "Expecting $file to be a UNIX domain socket, but it is not!" >&2
                fi
                ;;
        esac
    else
        echo "The file: $file does not appear within $timeout seconds!" >&2
        exit 1
    fi
}

# Waits for a regular file to become available until a certain timeout period has
# ellapsed.
#
# Parameters:
# $1: file to wait for
# S2: timeout period in seconds
#
# Exit status:
# 0 if the file appears and is of the right type, else 0

waitForFile()
{
    waitForAnyFileType "$1" "$2" "f"
}

# Waits for a directory to become available until a certain timeout period has
# ellapsed.
#
# Parameters:
# $1: file to wait for
# S2: timeout period in seconds
#
# Exit status:
# 0 if the file appears and is of the right type, else 0

waitForDirectory()
{
    waitForAnyFileType "$1" "$2" "d"
}

# Waits for a UNIX domain socket to become available until a certain timeout
# period has ellapsed.
#
# Parameters:
# $1: file to wait for
# S2: timeout period in seconds
#
# Exit status:
# 0 if the file appears and is of the right type, else 0

waitForSocket()
{
    waitForAnyFileType "$1" "$2" "S"
}

# Attempts to execute a command and retries it a given number of times if it
# fails.
#
# Parameters:
# $1: Command to execute
# $2: The amount of times to retry if the command fails

attemptSeveralTimes()
{
    local num=0
    while [ $num -lt $2 ]
    do
        if $1
        then
            break
        fi

        echo "Commmand failed, trying again in a second..." >&2
        sleep 1
        num=$((num + 1))
    done

    if [ $num -eq $2 ]
    then
        echo "Still does not work after $num attempts!" >&2
        false
    fi
}
