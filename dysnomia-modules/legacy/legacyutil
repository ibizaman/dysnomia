#!/bin/bash
set -e
set -o pipefail

# Copyright (c) 2009-2021 Sander van der Burg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Creates an unprivileged group and/or user
#
# Environment variables:
# container_group: Name of the group to create. If empty, no group will be created.
# container_gid: GID of the group to create. If empty, an aribitrary one will be chosen.
# container_username: Name of the user to create. If empty, no user will be created.
# container_uid: UID of the user to create. If empty, an aribitrary one will be chosen.
# container_homeDir: Path to the home directory of the user
# container_createHomeDir: When set to 1 the home directory will be created if it does not exists
# container_shell: Path to the shell of the user

createUnprivilegedUserAndGroup()
{
    # Create unprivileged group that runs the process, if requested
    if [ "$container_group" != "" ]
    then
        params=""

        if [ "$container_gid" != "" ]
        then
            params="$params -g $container_gid"
        fi

        params="$params $container_group"

        if ! getent group $container_group
        then
            groupadd $params
        fi
    fi

    # Create unprivileged user that runs the process, if requested
    if [ "$container_username" != "" ]
    then
        params=""

        if [ "$container_uid" != "" ]
        then
            params="$params -u $container_uid"
        fi

        if [ "$container_group" != "" ]
        then
            params="$params -g $container_group"
        fi

        if [ "$container_homeDir" = "" ]
        then
            params="$params -d /dev/null"
        else
            params="$params -d $container_homeDir"
        fi

        if [ "$container_createHomeDir" != "" ]
        then
            params="$params -m"
        fi

        if [ "$container_shell" = "" ]
        then
            params="$params -s /bin/sh"
        else
            params="$params -s $container_shell"
        fi

        params="$params $container_username"

        if ! id -u $container_username
        then
            useradd $params
        fi
    fi
}

# Removes an unpriveleged group or user.
#
# Environment variables:
# container_group: Name of the group to delete. If empty no group will be deleted.
# container_username: Name of the user to delete. If empty, no user will be deleted.

removeUnprivilegedUserAndGroup()
{
    # Remove unprivileged user, if requested

    if [ "$container_username" != "" ]
    then
        if id -u $container_username
        then
            userdel $container_username
        fi
    fi

    # Remove unprivileged group, if requested

    if [ "$container_group" != "" ]
    then
        if getent group $container_group
        then
            groupdel $container_group
        fi
    fi
}

# Adds user credentials to a systemd job
#
# Environment variables:
# container_group: Name of the group to run under. If empty no group restrictions will be applied.
# container_username: Name of the user to run under. If empty, no user restrictions will be applied.

addUserSettingsToSystemdConfig()
{
    if [ "$container_group" != "" ]
    then
        echo "Group=$container_group" >> $1
    fi

    if [ "$container_username" != "" ]
    then
        echo "User=$container_username" >> $1
    fi
}

# Removes a systemd job and its wanted dependencies
#
# Parameters:
# $1: Absolute path to the unit to remove
# $2: Path to the mutable component to activate

removeSystemdService()
{
    local jobsDir=$(dirname "$1")
    local jobName=$(basename "$1" .service)

    if [ -f $2/etc/socket ]
    then
        rm -f $jobsDir/dysnomia.target.wants/$jobName.socket
        rm -f $jobsDir/$jobName.socket
    else
        rm -f $jobsDir/dysnomia.target.wants/$jobName.service
    fi

    rm -f "$1"
}

# Activates a systemd job and configures its wanted dependencies
#
# Parameters:
# $1: Absolute path to the unit to activate
# $2: Path to the mutable component to activate

activateSystemdService()
{
    local jobsDir=$(dirname "$1")
    local jobName=$(basename "$1" .service)

    addUserSettingsToSystemdConfig "$1"
    if [ -f $2/etc/systemd-config ]
    then
        cat $2/etc/systemd-config >> "$1"
    fi

    if [ -f $jobsDir/dysnomia.target ]
    then
        mkdir -p $jobsDir/dysnomia.target.wants
    fi

    if [ -f $2/etc/socket ]
    then
        if [ ! -f $jobsDir/$jobName.socket ]
        then
            cp $2/etc/socket $jobsDir/$jobName.socket

            if [ -f $jobsDir/dysnomia.target ]
            then
                ln -sf ../$jobName.socket $jobsDir/dysnomia.target.wants/$jobName.socket
            fi
        fi

        startUnit=$jobName.socket
    else
        if [ -f $jobsDir/dysnomia.target ]
        then
            ln -sf ../$jobName.service $jobsDir/dysnomia.target.wants/$jobName.service
        fi

        startUnit=$jobName.service
    fi

    systemctl --system daemon-reload
    systemctl start $startUnit || (removeSystemdService $jobsDir/$jobName.service $2; removeUnprivilegedUserAndGroup; false)
}
