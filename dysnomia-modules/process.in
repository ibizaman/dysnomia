#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Activate or deactivate a process script. A process can either be a single
# executable in the bin/ sub folder, or a process specification in
# etc/dysnomia/process/*
#
# The process specification is a key=value pair configuration file that supports
# two fields. The process field refers to the process to execute, the pidFile to
# the path of the PID file that contains the PID of the daemon. If no pidFile is
# given, then it will be inferred from the process executable name.
#
# Files:
# dysnomia-support/groups/*: Groups to add on activation
# dysnomia-support/users/*: Users to add on activation
#
# Component properties (environment variables):
# runtimeDir: Directory in which PID files are stored (defaults to: /var/run)

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

export PATH=$prefix/bin:$PATH

timeout=${timeout:-1}

removeUsersAndGroups()
{
    dysnomia-delusers "$1"
    dysnomia-delgroups "$1"
}

rollback()
{
    removeUsersAndGroups "$1"
    exit 1
}

determineProcess()
{
    if [ "$process" = "" ]
    then
        local processPackage="$1"
        processes=( $processPackage/bin/* )
        local length="${#processes[@]}"

        if [ "$length" = "0" ]
        then
            echo "No process could be found. Make sure there is an executable in bin/ or a process config" >&2
            exit 1
        elif [ "$length" = "1" ]
        then
            echo "${processes[0]}"
        else
            echo "More than one process found. Specify which executable to start in a process config file" >&2
            exit 1
        fi
    else
        echo "$process"
    fi
}

determinePIDFile()
{
    local process="$1"
    local pidFile="$2"

    if [ "$pidFile" = "" ]
    then
        echo "$runtimeDir/$(basename $process).pid"
    else
        echo "$pidFile"
    fi
}

runtimeDir=${runtimeDir:-/var/run}

case "$1" in
    activate)
        (
        dysnomia-addgroups "$2"
        dysnomia-addusers "$2"

        if [ -d $2/etc/dysnomia/process ]
        then
            source $2/etc/dysnomia/process/*
        fi

        process=$(determineProcess "$2")
        pidFile=$(determinePIDFile "$process" "$pidFile")

        if [ -e "$pidFile" ]
        then
            cat >&2 <<EOF
PID file: $pidFile already exists, assuming that the process has been started
already! If not, you should remove it, and try starting the process again
EOF
        else
            $process

            # If a PID file does not exist, wait a bit, double check, and raise a warning if it does not appear
            if [ ! -e "$pidFile" ]
            then
                sleep "$timeout"

                if [ ! -e "$pidFile" ]
                then
                    cat >&2 <<EOF
WARNING: Could not detect PID file: $pidFile after starting the process!

This could mean that the initialization process is unreliable and it appears
at a later point in time. Alternatively, it may not appear all.

If the PID file does not appear, then the daemon cannot be terminated by the
deployment system! Please double check the configuration, the process' status
and increase the timeout setting, if needed.
EOF
                fi
            fi
        fi
        ) || rollback "$2"

        markComponentAsActive
        ;;

    deactivate)
        if [ -d $2/etc/dysnomia/process ]
        then
            source $2/etc/dysnomia/process/*
        fi

        process=$(determineProcess "$2")
        pidFile=$(determinePIDFile "$process" "$pidFile")

        if [ -e "$pidFile" ]
        then
            kill "$(cat $pidFile)"
        else
            echo "$pidFile does not exists! Assuming that it was stopped already!" >&2
        fi

        removeUsersAndGroups "$2"
        unmarkComponentAsActive
        ;;

    shell)
        cat >&2 <<EOF
This is a shell session that can be used to control the '$componentName'
process.
EOF
        ;;
esac
