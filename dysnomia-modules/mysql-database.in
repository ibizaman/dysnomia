#!/bin/bash
set -e
set -o pipefail
shopt -s nullglob

# Manages the deployment lifecycle of a MySQL database.
#
# On activation, an initial dump can be restored. If the mutable component
# contains a sub folder named mysql-databases/, then the dump files stored
# inside get imported.
#
# This module also supports snapshotting. It uses the output hash of the dump to
# uniquely identify each snapshot.
#
# Container properties (environment variables):
# mysqlUsername: Username of the account that has the privileges to administer
#    the database
# mysqlPassword: Password of the above account
# mysqlSocket: Path to the UNIX domain socket that is used to connect to the server (optional)

# Autoconf settings
export prefix=@prefix@

# Import utility functions
source @datadir@/@PACKAGE@/util

# Sets a number of common utility environment variables
composeUtilityVariables $0 $2 $3

if [ "$mysqlSocket" != "" ]
then
    socketArg="--socket=$mysqlSocket"
fi

timeout=${timeout:-10}

case "$1" in
    activate)
        if [ "$mysqlSocket" != "" ]
        then
            waitForSocket "$mysqlSocket" "$timeout"
        fi

        # Initalize the given schema if the database does not exists
        if [ "$(echo "show databases" | @mysql@ $socketArg --user=$mysqlUsername --password=$mysqlPassword -N | grep -x $componentName)" = "" ]
        then
            ( echo "create database $componentName;"
              echo "use $componentName;"

              if [ -d $2/mysql-databases ]
              then
                  cat $2/mysql-databases/*.sql
              fi
            ) | @mysql@ $socketArg --user=$mysqlUsername --password=$mysqlPassword -N
        fi
        markComponentAsActive
        ;;
    deactivate)
        markComponentAsGarbage
        ;;
    snapshot)
        tmpdir=$(mktemp -d)
        cd $tmpdir
        # Dump the MySQL database in a single transaction. Chop off the last
        # line because that contains a comment with a timestamp Without it we
        # can compare output hashes to see whether dumps are identical
        @mysqldump@ $socketArg --single-transaction --quick --user=$mysqlUsername --password=$mysqlPassword $componentName | head -n-1 | xz > dump.sql.xz

        hash=$(cat dump.sql.xz | sha256sum)
        hash=${hash:0:64}

        snapshotsPath=$(composeSnapshotsPath)

        if [ -d $snapshotsPath/$hash ]
        then
            rm -Rf $tmpdir
        else
            mkdir -p $snapshotsPath/$hash
            mv dump.sql.xz $snapshotsPath/$hash
            rmdir $tmpdir
        fi
        createGenerationSymlink $hash
        ;;
    restore)
        lastSnapshot=$(determineLastSnapshot)

        if [ "$lastSnapshot" != "" ]
        then
            ( echo "use $componentName;"
              xzcat $lastSnapshot/dump.sql.xz
            ) | @mysql@ $socketArg --user=$mysqlUsername --password=$mysqlPassword -N
        fi
        ;;
    collect-garbage)
        if componentMarkedAsGarbage
        then
            echo "drop database $componentName;" | @mysql@ $socketArg --user=$mysqlUsername --password=$mysqlPassword -N
            unmarkComponentAsGarbage
        fi
        ;;
    shell)
        cat >&2 <<EOF
This is a shell session that can be used to control the '$componentName' MySQL database.

Module specific environment variables:
componentName  Name of the database
mysqlUsername  Username of the account that has the privileges to administer
               the database
mysqlPassword  Password of the above account
mysqlSocket    Path to the UNIX domain socket that is used to connect to the
               server (optional)

Some useful commands:
@mysql@ $socketArg --user=\$mysqlUsername --password=\$mysqlPassword $componentName  # Start a MySQL interactive terminal
EOF
        ;;
esac
